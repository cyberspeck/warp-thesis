pathCT = "../data_final/CT_x1/"
pathMR = "../data_final/MR_x1/"
pathCT_x4 = "../data_final/CT_x4/"
pathMR_x4 = "../data_final/MR_x4/"
pathCT_x9 = "../data_final/CT_x9/"
pathMR_x9 = "../data_final/MR_x9/"
pathCT_x16 = "../data_final/CT_x16/"
pathMR_x16 = "../data_final/MR_x16/"
pathCT_x25 = "../data_final/CT_x25/"
pathMR_x25 = "../data_final/MR_x25/"
pathCT_x100 = "../data_final/CT_x100/"
pathMR_x100 = "../data_final/MR_x100/"
idxSlice = 10

CT = Volume(path=pathCT, method="CT", resample=1, ref=idxSlice)
CT_x4 = Volume(path=pathCT_x4, method="CT", resample=4, ref=idxSlice)
CT_x9 = Volume(path=pathCT_x9, method="CT", resample=9, ref=idxSlice)
CT_x16 = Volume(path=pathCT_x16, method="CT", resample=16, ref=idxSlice)
CT_x25 = Volume(path=pathCT_x25, method="CT", resample=25, ref=idxSlice)
CT_x100 = Volume(path=pathCT_x100, method="CT", resample=100, ref=idxSlice)

MR = Volume(path=pathMR, method="MR", resample=1, ref=idxSlice)
MR_x4 = Volume(path=pathMR_x4, method="MR", resample=4, ref=idxSlice)
MR_x9 = Volume(path=pathMR_x9, method="MR", resample=9, ref=idxSlice)
MR_x16 = Volume(path=pathMR_x16, method="MR", resample=16, ref=idxSlice)
MR_x25 = Volume(path=pathMR_x25, method="MR", resample=25, ref=idxSlice)
MR_x100 = Volume(path=pathMR_x100, method="MR", resample=100, ref=idxSlice)

vol_list = [[CT, CT_x4, CT_x9, CT_x25, CT_x100],[MR, MR_x4, MR_x9, MR_x25, MR_x100]]
modality, sets = np.shape(vol_list)

sliceNumbers = np.arange(CT.zSize, dtype=int)
warp = np.zeros((sets, CT.zSize, 2))
warpMagnitude = np.zeros((sets, CT.zSize, 1))

for i in range(sets):
    vol_list[0][i].getCentroid()
    vol_list[1][i].getCentroid()

for i in range(sets):
    # this calculates the coordinate difference of MR.centroid relative to CT.centroid
    warp[i] = fun.sitk_coordShift(vol_list[0][i].centroid, vol_list[1][i].centroid)
    # this calculates the norm (=absolute distance) between the centroids in each slice
    warpMagnitude[i] = fun.sitk_coordDist(warp[i])

i=4
fig = plt.figure()
plt.xlim(xmin=0, xmax=CT.zSize)
plt.plot(warp[i])
plt.ylabel(u"warpMagnitude [mm]")
plt.xlabel(u"slice")
